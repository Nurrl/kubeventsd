on: push

name: Continuous integration

env:
  # The name of the DockerHub repository
  NAME: kubeventsd/kubeventsd

  # Identify the project name from the repository name
  PROJECT: ${{ github.event.repository.name }}

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust:
          - stable
        target:
          - triple: x86_64-unknown-linux-musl
            os: linux
            arch: amd64
          - triple: aarch64-unknown-linux-musl
            os: linux
            arch: arm64

    env:
      # Enable cargo sparse registry for crates.io
      CARGO_REGISTRIES_CRATES_IO_PROTOCOL: sparse

    steps:
      - name: Checkout project
        uses: actions/checkout@v3

      - name: Install rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          use-cross: true
          profile: minimal
          toolchain: ${{ matrix.rust }}
          target: ${{ matrix.target.triple }}
          override: true
          components: rustfmt, clippy

      - name: Build the project
        uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: build
          args: --release --all-features --target=${{ matrix.target.triple }}

      - name: Test the project
        uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: test
          args: --release --all-features --target=${{ matrix.target.triple }}

      - name: Check code formatting
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

      - name: Lint the project
        uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: clippy
          args: --release --all-features --target=${{ matrix.target.triple }} -- -D warnings

      - name: Setup artifact for upload
        run: |
          # Create the `artifacts/` directory
          mkdir -p artifacts

          # Copy the built binary file and the Dockerfile
          cp ./target/${{ matrix.target.triple }}/release/${{ env.PROJECT }} artifacts/exec
          cp ./Dockerfile ./artifacts/

          # Save the target docker image's os/arch target in artifacts
          echo ${{ matrix.target.os }} > artifacts/os
          echo ${{ matrix.target.arch }} > artifacts/arch

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.target.triple }}
          path: artifacts/*

  deploy:
    name: Deploy image on DockerHub
    runs-on: ubuntu-latest
    needs: [build]

    if: startsWith(github.ref, 'refs/tags/') # Deploy only on tags
    env:
      # Enable the use of `docker manifest` and docker BuildKit
      DOCKER_CLI_EXPERIMENTAL: enabled
      DOCKER_BUILDKIT: 1
      # Identify the project name from the repository name
      PROJECT: ${{ github.event.repository.name }}

    steps:
      - name: Checkout project
        uses: actions/checkout@v3

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Setup artifacts for building
        run: |
          for path in artifacts/*; do
            exec="./$(cat ${path}/os)-$(cat ${path}/arch)"

            cp -v "${path}/exec" "${exec}"
          done

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ env.NAME }}:${{ github.ref_name }}
