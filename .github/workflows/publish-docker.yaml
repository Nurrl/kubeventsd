name: Publish on Docker Hub

on:
  push:
    tags: # Deploy only on tags
      - "*"

env:
  # Set here the docker image name and tag
  NAME: kubeventsd/kubeventsd

jobs:
  deploy:
    name: Deploy image on Docker Hub
    runs-on: ubuntu-latest
    needs: [build, tests, audit]
    env:
      # Enable the use of `docker manifest` and docker BuildKit
      DOCKER_CLI_EXPERIMENTAL: enabled
      DOCKER_BUILDKIT: 1
      # Identify the project name from the repository name
      PROJECT: ${{ github.event.repository.name }}
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Create the image for each platform
        run: |
          # For each target arch, build the image, with the specified arch
          for path in */; do
            PLATFORM="$(cat ${path}/os)/$(cat ${path}/arch)"
            IMAGE="${NAME}:latest-$(cat ${path}/arch)"

            docker build --platform "${PLATFORM}" --tag "${IMAGE}" "${path}"
            docker push "${IMAGE}"

            echo "${IMAGE}" >> "./images"

            echo "Successfully built and pushed the image with the following tag '${IMAGE}' for '${PLATFORM}'"
          done
      - name: Create the cross-platform images, tag them and push them to the repository
        run: |
          # Identify which tags need to deploy according to the ref
          TAGS=("latest")
          if [[ "${GITHUB_REF}" =~ ^refs/tags/([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
            TAGS+=("${BASH_REMATCH[1]}" "${BASH_REMATCH[1]}.${BASH_REMATCH[2]}" "${BASH_REMATCH[1]}.${BASH_REMATCH[2]}.${BASH_REMATCH[3]}")
          fi

          for tag in "${TAGS[@]}"; do
            IMAGE="${NAME}:${tag}"
            echo "Tagging and pushing the image '${IMAGE}' to Docker Hub"

            # Create the cross-platform image as ${tag}
            docker manifest create "${IMAGE}" $(cat ./images)
            # Push it to Docker Hub
            docker manifest push "${IMAGE}"
          done
